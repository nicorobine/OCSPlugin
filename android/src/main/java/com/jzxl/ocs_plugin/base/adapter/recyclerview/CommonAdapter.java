package com.jzxl.ocs_plugin.base.adapter.recyclerview;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.recyclerview.widget.RecyclerView;import java.util.List;/** * Created by zhy on 16/4/9. */public abstract class CommonAdapter<T> extends RecyclerView.Adapter<ViewHolder> {    protected Context mContext;    protected int mLayoutId;    protected List<T> mDatas;    protected LayoutInflater mInflater;    protected String mStrType;    private OnItemClickListener mOnItemClickListener;    public void setmDatas(List<T> mDatas) {        this.mDatas = mDatas;    }    public void setOnItemClickListener(OnItemClickListener onItemClickListener) {        this.mOnItemClickListener = onItemClickListener;    }    public CommonAdapter(Context context, int layoutId, List<T> datas) {        mContext = context;        mInflater = LayoutInflater.from(context);        mLayoutId = layoutId;        mDatas = datas;    }    public CommonAdapter(Context context, int layoutId, List<T> datas, String strType) {        mContext = context;        mInflater = LayoutInflater.from(context);        mLayoutId = layoutId;        mDatas = datas;        mStrType = strType;    }    /**     * 多添加了一个CommonAdapter的构造函数，     * 为了多布局的实现     */    public CommonAdapter(Context context, List<T> datas) {        mContext = context;        mDatas = datas;    }    @Override    public ViewHolder onCreateViewHolder(final ViewGroup parent, int viewType) {        ViewHolder viewHolder = ViewHolder.get(mContext, null, parent, mLayoutId, -1);        setListener(parent, viewHolder, viewType);        return viewHolder;    }    protected int getPosition(RecyclerView.ViewHolder viewHolder) {        return viewHolder.getAdapterPosition();    }    protected boolean isEnabled(int viewType) {        return true;    }    protected void setListener(final ViewGroup parent, final ViewHolder viewHolder, int viewType) {        if (!isEnabled(viewType)) return;        viewHolder.getConvertView().setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mOnItemClickListener != null) {                    int position = getPosition(viewHolder);                    mOnItemClickListener.onItemClick(parent, v, mDatas.get(position), position);                }            }        });        viewHolder.getConvertView().setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {                if (mOnItemClickListener != null) {                    int position = getPosition(viewHolder);                    return mOnItemClickListener.onItemLongClick(parent, v, mDatas.get(position), position);                }                return false;            }        });    }    @Override    public void onBindViewHolder(ViewHolder holder, int position) {        holder.updatePosition(position);        convert(holder, mDatas.get(position), position);    }    public abstract void convert(ViewHolder holder, T t, int position);    @Override    public int getItemCount() {        return mDatas != null ? mDatas.size() : 0;    }}